/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/bd/list/etf2l": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * ETF2L Bans
         * @description #### Controller:
         *
         *     `github.com/leighmacdonald/tf-api/bd.Register.handleGetETF2LList.func3`
         *
         *     ---
         *
         *     Generates a bot detector compatible list using ETF2L league bans.
         */
        get: operations["GET_/api/bd/list/etf2l"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/bd/list/rgl": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * RGL Bans
         * @description #### Controller:
         *
         *     `github.com/leighmacdonald/tf-api/bd.Register.handleGetRGLList.func2`
         *
         *     ---
         *
         *     Generates a bot detector compatible list using RGL league bans. This data is sourced from their API periodically.
         */
        get: operations["GET_/api/bd/list/rgl"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/bd/list/serveme": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Serveme Bans
         * @description #### Controller:
         *
         *     `github.com/leighmacdonald/tf-api/bd.Register.handleGetServemeListBD.func4`
         *
         *     ---
         *
         *     Generates a bot detector compatible list using serveme server bans. This data is sourced from their banned_steam_ids.csv available on their github.
         */
        get: operations["GET_/api/bd/list/serveme"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/bd/query": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search
         * @description #### Controller:
         *
         *     `github.com/leighmacdonald/tf-api/bd.Register.getBotDetector.func1`
         *
         *     ---
         *
         *     Search using a combination of steam_id and attrs
         */
        get: operations["GET_/api/bd/query"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/league/rgl/player_history": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Player History
         * @description #### Controller:
         *
         *     `github.com/leighmacdonald/tf-api/rgl.Register.handleGetRGLPlayerHistory.func1`
         *
         *     ---
         *
         *     Fetches a players rgl league team history
         */
        get: operations["GET_/api/league/rgl/player_history"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/log/chat/{steamid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Player Chat Logs
         * @description #### Controller:
         *
         *     `github.com/leighmacdonald/tf-api/logstf.Register.handleGetLogChat.func4`
         *
         *     ---
         *
         *     Get a players chat history.
         */
        get: operations["GET_/api/log/chat/:steamid"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/log/player/{steamid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Player Logs Summary
         * @description #### Controller:
         *
         *     `github.com/leighmacdonald/tf-api/logstf.Register.handleGetLogsSummary.func2`
         *
         *     ---
         *
         *     Summarizes a set of stats using a players entire logs.tf match history.
         */
        get: operations["GET_/api/log/player/:steamid"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/log/player/{steamid}/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Player Match List
         * @description #### Controller:
         *
         *     `github.com/leighmacdonald/tf-api/logstf.Register.handleGetLogsList.func3`
         *
         *     ---
         *
         *     Returns a list of logs in which the player has participated
         */
        get: operations["GET_/api/log/player/:steamid/list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/log/{logid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a log
         * @description #### Controller:
         *
         *     `github.com/leighmacdonald/tf-api/logstf.Register.handleGetLogByID.func1`
         *
         *     ---
         *
         *     Returns a full logs.tf match represented as a json object.
         */
        get: operations["GET_/api/log/:logid"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/meta/bans": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Meta Bans
         * @description #### Controller:
         *
         *     `github.com/leighmacdonald/tf-api/meta.Register.getMetaBans.func2`
         *
         *     ---
         *
         *     Fetches the ban info for a player which merges several different data sources into a single meta ban object
         */
        get: operations["GET_/api/meta/bans"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/meta/profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Meta Profile
         * @description #### Controller:
         *
         *     `github.com/leighmacdonald/tf-api/meta.Register.getMetaProfile.func1`
         *
         *     ---
         *
         *     Fetches the meta profile which merges several different data sources into a single meta profile
         */
        get: operations["GET_/api/meta/profile"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/serveme/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Serve Bans
         * @description #### Controller:
         *
         *     `github.com/leighmacdonald/tf-api/serveme.Register.handleGetServemeList.func1`
         *
         *     ---
         *
         *     Fetches a list of all known serveme bans, sources from their github repo.
         */
        get: operations["GET_/api/serveme/"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/sourcebans/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Query Many Players
         * @description #### Controller:
         *
         *     `github.com/leighmacdonald/tf-api/sourcebans.Register.handleGetSourceBansMany.func1`
         *
         *     ---
         *
         *     Searches for sourcebans entries for up to 100 users
         */
        get: operations["GET_/api/sourcebans/"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/sourcebans/{steamid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Query Player
         * @description #### Controller:
         *
         *     `github.com/leighmacdonald/tf-api/sourcebans.Register.handleGetSourceBans.func2`
         *
         *     ---
         *
         *     Query sourcebans entries for a single user
         */
        get: operations["GET_/api/sourcebans/:steamid"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/steam/bans": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Player Bans
         * @description #### Controller:
         *
         *     `github.com/leighmacdonald/tf-api/steam.Register.handleGetSteamBans.func1`
         *
         *     ---
         *
         *     Returns the ban/probation status of the players account. See [steam api](https://wiki.teamfortress.com/wiki/WebAPI/GetPlayerBans).
         */
        get: operations["GET_/api/steam/bans"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/steam/friends": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Friends
         * @description #### Controller:
         *
         *     `github.com/leighmacdonald/tf-api/steam.Register.handleGetSteamFriends.func3`
         *
         *     ---
         *
         *     Get a users list of friends. Only works if friends are public. See [steam api](https://wiki.teamfortress.com/wiki/WebAPI/GetFriendList).
         */
        get: operations["GET_/api/steam/friends"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/steam/owned_games": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Owned Games
         * @description #### Controller:
         *
         *     `github.com/leighmacdonald/tf-api/steam.Register.handleGetSteamOwnedGames.func4`
         *
         *     ---
         *
         *     Return a list of a users owned games. This will only work if their games are set to public. See [steam api](https://wiki.teamfortress.com/wiki/WebAPI/GetOwnedGames).
         */
        get: operations["GET_/api/steam/owned_games"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/steam/steamid": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * SteamID Conversion
         * @description #### Controller:
         *
         *     `github.com/leighmacdonald/tf-api/steam.Register.handleGetSteamID.func5`
         *
         *     ---
         *
         *     Used to convert steamids between formats. Can also resolve vanity urls and names.
         */
        get: operations["GET_/api/steam/steamid"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/steam/summary": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Player Summary
         * @description #### Controller:
         *
         *     `github.com/leighmacdonald/tf-api/steam.Register.handleGetSteamSummary.func2`
         *
         *     ---
         *
         *     Returns the summary provided by the [steam api](https://wiki.teamfortress.com/wiki/WebAPI/GetPlayerSummaries).
         */
        get: operations["GET_/api/steam/summary"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Logout of the account
         * @description #### Controller:
         *
         *     `github.com/leighmacdonald/tf-api/auth.Register.getLogout.func3`
         *
         *     ---
         *
         *     Logs out of the currently logged in cookie.
         */
        get: operations["GET_/auth/logout"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Refresh token
         * @description #### Controller:
         *
         *     `github.com/leighmacdonald/tf-api/auth.Register.getRefresh.func4`
         *
         *     ---
         *
         *     Regenerates a new auth token
         */
        get: operations["GET_/auth/refresh"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description  schema */
        "": unknown;
        /** @description Ban schema */
        Ban: {
            community_banned?: boolean;
            /** Format: date-time */
            created_on?: string;
            days_since_last_ban?: number;
            economy_ban?: string;
            number_of_game_bans?: number;
            number_of_vac_bans?: number;
            steam_id?: unknown;
            /** Format: date-time */
            updated_on?: string;
            vac_banned?: boolean;
        };
        /** @description BanRecord schema */
        BanRecord: {
            /** Format: date-time */
            created_on?: string;
            deleted?: boolean;
            name?: string;
            reason?: string;
            steam_id?: unknown;
            /** Format: date-time */
            updated_on?: string;
        };
        /** @description Chat schema */
        Chat: {
            log_id?: number;
            message?: string;
            name?: string;
        };
        /** @description ChatQuery schema */
        ChatQuery: {
            query?: string;
        };
        /** @description Friend schema */
        Friend: {
            /** Format: date-time */
            created_on?: string;
            /** Format: date-time */
            friend_since?: string;
            relationship?: string;
            /** Format: date-time */
            removed_on?: string | null;
            steam_id?: unknown;
            /** Format: date-time */
            updated_on?: string;
        };
        /** @description GameOwnedPlayer schema */
        GameOwnedPlayer: {
            app_id?: number;
            /** Format: date-time */
            created_on?: string;
            has_community_visible_stats?: boolean;
            img_icon_url?: string;
            img_logo_url?: string;
            name?: string;
            playtime_forever_minutes?: number;
            playtime_two_weeks?: number;
            steam_id?: unknown;
            /** Format: date-time */
            updated_on?: string;
        };
        /** @description HTTPError schema */
        HTTPError: {
            /** @description Human readable error message */
            detail?: string | null;
            errors?: {
                more?: {
                    [key: string]: unknown;
                };
                name?: string;
                reason?: string;
            }[] | null;
            instance?: string | null;
            /**
             * @description HTTP status code
             * @example 403
             */
            status?: number | null;
            /** @description Short title of the error */
            title?: string | null;
            /** @description URL of the error type. Can be used to lookup the error in a documentation */
            type?: string | null;
        };
        /** @description LogIDQueryParam schema */
        LogIDQueryParam: {
            logid: number;
        };
        /** @description Match schema */
        Match: {
            chat?: {
                log_id?: number;
                message?: string;
                name?: string;
            }[];
            /** Format: date-time */
            created_on?: string;
            duration?: unknown;
            exists?: boolean;
            killstreaks?: {
                steam_id?: unknown;
                streak?: number;
                /** Format: int64 */
                time?: number;
            }[];
            log_id?: number;
            map?: string;
            medics?: {
                /** Format: double */
                avg_time_before_healing?: number;
                avg_time_build?: unknown;
                avg_time_use?: unknown;
                avg_uber_len?: unknown;
                biggest_adv_lost?: unknown;
                charges_kritz?: number;
                charges_medigun?: number;
                charges_quickfix?: number;
                charges_vacc?: number;
                death_after_charge?: number;
                drops?: number;
                /** Format: int64 */
                healing?: number;
                /** Format: double */
                healing_per_min?: number;
                healspread?: {
                    [key: string]: number;
                };
                major_adv_lost?: number;
                near_full_death?: number;
                steam_id?: unknown;
            }[];
            players?: {
                airshots?: number;
                assists?: number;
                backstabs?: number;
                caps?: number;
                class_assists?: {
                    demoman?: number;
                    engineer?: number;
                    heavyweapons?: number;
                    medic?: number;
                    pyro?: number;
                    scout?: number;
                    sniper?: number;
                    soldier?: number;
                    spy?: number;
                };
                class_deaths?: {
                    demoman?: number;
                    engineer?: number;
                    heavyweapons?: number;
                    medic?: number;
                    pyro?: number;
                    scout?: number;
                    sniper?: number;
                    soldier?: number;
                    spy?: number;
                };
                class_kills?: {
                    demoman?: number;
                    engineer?: number;
                    heavyweapons?: number;
                    medic?: number;
                    pyro?: number;
                    scout?: number;
                    sniper?: number;
                    soldier?: number;
                    spy?: number;
                };
                classes?: {
                    assists?: number;
                    class?: string;
                    damage?: number;
                    deaths?: number;
                    kills?: number;
                    played?: unknown;
                    weapons?: {
                        accuracy?: number;
                        damage?: number;
                        hits?: number;
                        kills?: number;
                        shots?: number;
                        weapon?: string;
                    }[];
                }[];
                /** Format: int64 */
                damage?: number;
                damage_taken?: number;
                deaths?: number;
                dpm?: number;
                /** Format: double */
                dtm?: number;
                headshots?: number;
                healing_taken?: number;
                health_packs?: number;
                health_packs_healing?: number;
                /** Format: double */
                kad?: number;
                /** Format: double */
                kd?: number;
                kills?: number;
                name?: string;
                steam_id?: unknown;
                team?: string;
            }[];
            rounds?: {
                damage_blu?: number;
                damage_red?: number;
                events?: unknown[];
                kills_blu?: number;
                kills_red?: number;
                length?: unknown;
                mid_fight?: string;
                players?: {
                    dmg?: number;
                    kills?: number;
                    steam_id?: unknown;
                }[];
                round?: number;
                score_blu?: number;
                score_red?: number;
                ubers_blu?: number;
                ubers_red?: number;
            }[];
            score_blu?: number;
            score_red?: number;
            teams?: {
                blu?: {
                    caps?: number;
                    charges?: number;
                    /** Format: int64 */
                    damage?: number;
                    deaths?: number;
                    drops?: number;
                    first_caps?: number;
                    kills?: number;
                    score?: number;
                };
                red?: {
                    caps?: number;
                    charges?: number;
                    /** Format: int64 */
                    damage?: number;
                    deaths?: number;
                    drops?: number;
                    first_caps?: number;
                    kills?: number;
                    score?: number;
                };
            };
            title?: string;
            version?: number;
        };
        /** @description MatchInfo schema */
        MatchInfo: {
            /** Format: date-time */
            created_on?: string;
            duration?: unknown;
            exists?: boolean;
            log_id?: number;
            map?: string;
            score_blu?: number;
            score_red?: number;
            title?: string;
            version?: number;
        };
        /** @description PlayerSummary schema */
        PlayerSummary: {
            airshots_avg?: unknown;
            airshots_sum?: number;
            assists_avg?: unknown;
            assists_sum?: number;
            backstabs_avg?: unknown;
            backstabs_sum?: number;
            caps_avg?: unknown;
            caps_sum?: number;
            damage_avg?: unknown;
            /** Format: int64 */
            damage_sum?: number;
            damage_taken_avg?: unknown;
            damage_taken_sum?: number;
            deaths_avg?: unknown;
            deaths_sum?: number;
            dpm_avg?: unknown;
            dtm_avg?: unknown;
            headshots_avg?: unknown;
            headshots_sum?: number;
            healing_taken_avg?: unknown;
            healing_taken_sum?: number;
            health_packs_avg?: unknown;
            health_packs_sum?: number;
            kad_avg?: unknown;
            kd_avg?: unknown;
            kills_avg?: unknown;
            kills_sum?: number;
            logs?: number;
        };
        /** @description Profile schema */
        Profile: {
            ban_state?: {
                community_banned?: boolean;
                /** Format: date-time */
                created_on?: string;
                days_since_last_ban?: number;
                economy_ban?: string;
                number_of_game_bans?: number;
                number_of_vac_bans?: number;
                steam_id?: unknown;
                /** Format: date-time */
                updated_on?: string;
                vac_banned?: boolean;
            };
            bot_detector?: {
                list_name?: string;
                match?: {
                    attributes?: string[];
                    last_seen?: {
                        player_name?: string | null;
                        time?: number | null;
                    } | null;
                    proof?: string[];
                    steamid?: unknown;
                };
            }[];
            friends?: {
                /** Format: date-time */
                created_on?: string;
                /** Format: date-time */
                friend_since?: string;
                relationship?: string;
                /** Format: date-time */
                removed_on?: string | null;
                steam_id?: unknown;
                /** Format: date-time */
                updated_on?: string;
            }[];
            league_bans?: {
                [key: string]: unknown[];
            };
            logs_count?: number;
            rgl?: {
                division_name?: string;
                final_rank?: number;
                is_team_leader?: boolean;
                /** Format: date-time */
                joined_at?: string;
                /** Format: date-time */
                left_at?: string | null;
                name?: string;
                tag?: string;
                team_leader?: unknown;
                team_name?: string;
            }[];
            /** @description BanRecord schema */
            serve_me?: {
                /** Format: date-time */
                created_on?: string;
                deleted?: boolean;
                name?: string;
                reason?: string;
                steam_id?: unknown;
                /** Format: date-time */
                updated_on?: string;
            };
            source_bans?: {
                ban_id?: number;
                /** Format: date-time */
                created_on?: string;
                /** Format: date-time */
                expires_on?: string;
                /** Format: date-time */
                invoked_on?: string;
                permanent?: boolean;
                persona_name?: string;
                reason?: string;
                site_id?: number;
                site_name?: string;
                steam_id?: unknown;
                unban_reason?: string;
                unbanned?: boolean;
                /** Format: date-time */
                updated_on?: string;
            }[];
            summary?: {
                avatar?: string;
                avatarfull?: string;
                avatarhash?: string;
                avatarmedium?: string;
                commentpermission?: number;
                communityvisibilitystate?: number;
                lastlogoff?: number;
                loccityid?: number;
                loccountrycode?: string;
                locstatecode?: string;
                personaname?: string;
                personastate?: number;
                personastateflags?: number;
                primaryclanid?: string;
                profilestate?: number;
                profileurl?: string;
                realname?: string;
                steamid?: unknown;
                timecreated?: number;
            };
        };
        /** @description RGLPlayerTeamHistory schema */
        RGLPlayerTeamHistory: {
            division_name?: string | null;
            final_rank?: number | null;
            is_team_leader?: boolean;
            /** Format: date-time */
            joined_at?: string;
            /** Format: date-time */
            left_at?: string | null;
            name?: string;
            tag?: string | null;
            team_leader?: unknown;
            team_name?: string | null;
        };
        /** @description Resolved schema */
        Resolved: {
            profile?: string;
            steam?: string;
            steam3?: string;
            steam32?: number;
            steam64?: string;
        };
        /** @description Schema schema */
        Schema: {
            $schema?: string;
            file_info?: {
                authors?: string[];
                description?: string;
                title?: string;
                update_url?: string;
            };
            players?: {
                attributes?: string[];
                last_seen?: {
                    player_name?: string | null;
                    time?: number | null;
                } | null;
                proof?: string[];
                steamid?: unknown;
            }[];
        };
        /** @description SearchResult schema */
        SearchResult: {
            list_name?: string;
            match?: {
                attributes?: string[];
                last_seen?: {
                    player_name?: string | null;
                    time?: number | null;
                } | null;
                proof?: string[];
                steamid?: unknown;
            };
        };
        /** @description SteamIDQueryParam schema */
        SteamIDQueryParam: {
            steamid?: string;
        };
        /** @description Summary schema */
        Summary: {
            avatar?: string;
            avatarfull?: string;
            avatarhash?: string;
            avatarmedium?: string;
            commentpermission?: number;
            communityvisibilitystate?: number;
            lastlogoff?: number;
            loccityid?: number;
            loccountrycode?: string;
            locstatecode?: string;
            personaname?: string;
            personastate?: number;
            personastateflags?: number;
            primaryclanid?: string;
            profilestate?: number;
            profileurl?: string;
            realname?: string;
            steamid?: unknown;
            timecreated?: number;
        };
        /** @description loginSuccessParams schema */
        loginSuccessParams: {
            assoc_handle?: number;
            claimed_id?: string;
            identity?: string;
            mode?: string;
            ns?: string;
            op_endpoint?: string;
            response_nonce?: string;
            return_to?: string;
            sig?: string;
            signed?: string;
        };
        /** @description tokenResponse schema */
        tokenResponse: {
            token?: string;
        };
        /** @description unknown-interface schema */
        "unknown-interface": unknown;
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    "GET_/api/bd/list/etf2l": {
        parameters: {
            query?: never;
            header?: {
                Accept?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Schema"];
                    "application/xml": components["schemas"]["Schema"];
                };
            };
            /** @description Bad Request _(validation or deserialization error)_ */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPError"];
                    "application/xml": components["schemas"]["HTTPError"];
                };
            };
            /** @description Internal Server Error _(panics)_ */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPError"];
                    "application/xml": components["schemas"]["HTTPError"];
                };
            };
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "GET_/api/bd/list/rgl": {
        parameters: {
            query?: never;
            header?: {
                Accept?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Schema"];
                    "application/xml": components["schemas"]["Schema"];
                };
            };
            /** @description Bad Request _(validation or deserialization error)_ */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPError"];
                    "application/xml": components["schemas"]["HTTPError"];
                };
            };
            /** @description Internal Server Error _(panics)_ */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPError"];
                    "application/xml": components["schemas"]["HTTPError"];
                };
            };
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "GET_/api/bd/list/serveme": {
        parameters: {
            query?: never;
            header?: {
                Accept?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Schema"];
                    "application/xml": components["schemas"]["Schema"];
                };
            };
            /** @description Bad Request _(validation or deserialization error)_ */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPError"];
                    "application/xml": components["schemas"]["HTTPError"];
                };
            };
            /** @description Internal Server Error _(panics)_ */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPError"];
                    "application/xml": components["schemas"]["HTTPError"];
                };
            };
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "GET_/api/bd/query": {
        parameters: {
            query: {
                /** @description Comma separated list of steamids in any format */
                steamids: string;
                /** @description Comma separated list of attrs to filter for. */
                attrs?: string;
            };
            header?: {
                Accept?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SearchResult"][];
                    "application/xml": components["schemas"]["SearchResult"][];
                };
            };
            /** @description Bad Request _(validation or deserialization error)_ */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPError"];
                    "application/xml": components["schemas"]["HTTPError"];
                };
            };
            /** @description Internal Server Error _(panics)_ */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPError"];
                    "application/xml": components["schemas"]["HTTPError"];
                };
            };
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "GET_/api/league/rgl/player_history": {
        parameters: {
            query: {
                /** @description Comma separated list of steamids in any format */
                steamids: string;
            };
            header?: {
                Accept?: string;
            };
            path?: never;
            cookie?: never;
        };
        /** @description Request body for logstf.ChatQuery */
        requestBody: {
            content: {
                "*/*": components["schemas"]["ChatQuery"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RGLPlayerTeamHistory"][];
                    "application/xml": components["schemas"]["RGLPlayerTeamHistory"][];
                };
            };
            /** @description Bad Request _(validation or deserialization error)_ */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPError"];
                    "application/xml": components["schemas"]["HTTPError"];
                };
            };
            /** @description Internal Server Error _(panics)_ */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPError"];
                    "application/xml": components["schemas"]["HTTPError"];
                };
            };
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "GET_/api/log/chat/:steamid": {
        parameters: {
            query?: never;
            header?: {
                Accept?: string;
            };
            path: {
                /** @description Players steam id */
                steamid: string;
            };
            cookie?: never;
        };
        /** @description Request body for logstf.ChatQuery */
        requestBody: {
            content: {
                "*/*": components["schemas"]["ChatQuery"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Chat"][];
                    "application/xml": components["schemas"]["Chat"][];
                };
            };
            /** @description Bad Request _(validation or deserialization error)_ */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPError"];
                    "application/xml": components["schemas"]["HTTPError"];
                };
            };
            /** @description Internal Server Error _(panics)_ */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPError"];
                    "application/xml": components["schemas"]["HTTPError"];
                };
            };
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "GET_/api/log/player/:steamid": {
        parameters: {
            query?: never;
            header?: {
                Accept?: string;
            };
            path: {
                /** @description Players steam id */
                steamid: string;
            };
            cookie?: never;
        };
        /** @description Request body for shared.SteamIDQueryParam */
        requestBody: {
            content: {
                "*/*": components["schemas"]["SteamIDQueryParam"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PlayerSummary"];
                    "application/xml": components["schemas"]["PlayerSummary"];
                };
            };
            /** @description Bad Request _(validation or deserialization error)_ */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPError"];
                    "application/xml": components["schemas"]["HTTPError"];
                };
            };
            /** @description Internal Server Error _(panics)_ */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPError"];
                    "application/xml": components["schemas"]["HTTPError"];
                };
            };
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "GET_/api/log/player/:steamid/list": {
        parameters: {
            query?: never;
            header?: {
                Accept?: string;
            };
            path: {
                /** @description Players steam id */
                steamid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MatchInfo"][];
                    "application/xml": components["schemas"]["MatchInfo"][];
                };
            };
            /** @description Bad Request _(validation or deserialization error)_ */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPError"];
                    "application/xml": components["schemas"]["HTTPError"];
                };
            };
            /** @description Internal Server Error _(panics)_ */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPError"];
                    "application/xml": components["schemas"]["HTTPError"];
                };
            };
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "GET_/api/log/:logid": {
        parameters: {
            query?: never;
            header?: {
                Accept?: string;
            };
            path: {
                /** @description The log.tf match id */
                logid: string;
            };
            cookie?: never;
        };
        /** @description Request body for logstf.LogIDQueryParam */
        requestBody: {
            content: {
                "*/*": components["schemas"]["LogIDQueryParam"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Match"];
                    "application/xml": components["schemas"]["Match"];
                };
            };
            /** @description Bad Request _(validation or deserialization error)_ */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPError"];
                    "application/xml": components["schemas"]["HTTPError"];
                };
            };
            /** @description Internal Server Error _(panics)_ */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPError"];
                    "application/xml": components["schemas"]["HTTPError"];
                };
            };
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "GET_/api/meta/bans": {
        parameters: {
            query: {
                /** @description Steamid in any format */
                steamid: string;
            };
            header?: {
                Accept?: string;
            };
            path?: never;
            cookie?: never;
        };
        /** @description Request body for shared.SteamIDQueryParam */
        requestBody: {
            content: {
                "*/*": components["schemas"]["SteamIDQueryParam"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"][];
                    "application/xml": components["schemas"][];
                };
            };
            /** @description Bad Request _(validation or deserialization error)_ */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPError"];
                    "application/xml": components["schemas"]["HTTPError"];
                };
            };
            /** @description Internal Server Error _(panics)_ */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPError"];
                    "application/xml": components["schemas"]["HTTPError"];
                };
            };
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "GET_/api/meta/profile": {
        parameters: {
            query: {
                /** @description Steamid in any format */
                steamid: string;
            };
            header?: {
                Accept?: string;
            };
            path?: never;
            cookie?: never;
        };
        /** @description Request body for shared.SteamIDQueryParam */
        requestBody: {
            content: {
                "*/*": components["schemas"]["SteamIDQueryParam"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Profile"][];
                    "application/xml": components["schemas"]["Profile"][];
                };
            };
            /** @description Bad Request _(validation or deserialization error)_ */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPError"];
                    "application/xml": components["schemas"]["HTTPError"];
                };
            };
            /** @description Internal Server Error _(panics)_ */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPError"];
                    "application/xml": components["schemas"]["HTTPError"];
                };
            };
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "GET_/api/serveme/": {
        parameters: {
            query?: never;
            header?: {
                Accept?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BanRecord"][];
                    "application/xml": components["schemas"]["BanRecord"][];
                };
            };
            /** @description Bad Request _(validation or deserialization error)_ */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPError"];
                    "application/xml": components["schemas"]["HTTPError"];
                };
            };
            /** @description Internal Server Error _(panics)_ */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPError"];
                    "application/xml": components["schemas"]["HTTPError"];
                };
            };
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "GET_/api/sourcebans/": {
        parameters: {
            query: {
                /** @description Comma separated list of steamids in any format */
                steamids: string;
            };
            header?: {
                Accept?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BanRecord"][];
                    "application/xml": components["schemas"]["BanRecord"][];
                };
            };
            /** @description Bad Request _(validation or deserialization error)_ */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPError"];
                    "application/xml": components["schemas"]["HTTPError"];
                };
            };
            /** @description Internal Server Error _(panics)_ */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPError"];
                    "application/xml": components["schemas"]["HTTPError"];
                };
            };
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "GET_/api/sourcebans/:steamid": {
        parameters: {
            query?: never;
            header?: {
                Accept?: string;
            };
            path: {
                /** @description Players steam id */
                steamid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BanRecord"][];
                    "application/xml": components["schemas"]["BanRecord"][];
                };
            };
            /** @description Bad Request _(validation or deserialization error)_ */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPError"];
                    "application/xml": components["schemas"]["HTTPError"];
                };
            };
            /** @description Internal Server Error _(panics)_ */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPError"];
                    "application/xml": components["schemas"]["HTTPError"];
                };
            };
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "GET_/api/steam/bans": {
        parameters: {
            query: {
                /** @description Comma separated list of steamids in any format */
                steamids: string;
            };
            header?: {
                Accept?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Ban"][];
                    "application/xml": components["schemas"]["Ban"][];
                };
            };
            /** @description Invalid steamid(s) provided or cannot resolve vanity name */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Ban"];
                    "application/xml": components["schemas"]["Ban"];
                };
            };
            /** @description Internal Server Error _(panics)_ */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPError"];
                    "application/xml": components["schemas"]["HTTPError"];
                };
            };
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "GET_/api/steam/friends": {
        parameters: {
            query: {
                /** @description Steamid in any format */
                steamid: string;
            };
            header?: {
                Accept?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Friend"][];
                    "application/xml": components["schemas"]["Friend"][];
                };
            };
            /** @description Invalid steamid(s) provided or cannot resolve vanity name */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Ban"];
                    "application/xml": components["schemas"]["Ban"];
                };
            };
            /** @description Internal Server Error _(panics)_ */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPError"];
                    "application/xml": components["schemas"]["HTTPError"];
                };
            };
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "GET_/api/steam/owned_games": {
        parameters: {
            query: {
                /** @description Comma separated list of steamids in any format */
                steamids: string;
            };
            header?: {
                Accept?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GameOwnedPlayer"][];
                    "application/xml": components["schemas"]["GameOwnedPlayer"][];
                };
            };
            /** @description Invalid steamid(s) provided or cannot resolve vanity name */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Ban"];
                    "application/xml": components["schemas"]["Ban"];
                };
            };
            /** @description Internal Server Error _(panics)_ */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPError"];
                    "application/xml": components["schemas"]["HTTPError"];
                };
            };
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "GET_/api/steam/steamid": {
        parameters: {
            query: {
                /** @description Steamid in any format */
                steamid: string;
            };
            header?: {
                Accept?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Resolved"];
                    "application/xml": components["schemas"]["Resolved"];
                };
            };
            /** @description Invalid steamid(s) provided or cannot resolve vanity name */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Ban"];
                    "application/xml": components["schemas"]["Ban"];
                };
            };
            /** @description Internal Server Error _(panics)_ */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPError"];
                    "application/xml": components["schemas"]["HTTPError"];
                };
            };
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "GET_/api/steam/summary": {
        parameters: {
            query: {
                /** @description Comma separated list of steamids in any format */
                steamids: string;
            };
            header?: {
                Accept?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Summary"][];
                    "application/xml": components["schemas"]["Summary"][];
                };
            };
            /** @description Invalid steamid(s) provided or cannot resolve vanity name */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Ban"];
                    "application/xml": components["schemas"]["Ban"];
                };
            };
            /** @description Internal Server Error _(panics)_ */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPError"];
                    "application/xml": components["schemas"]["HTTPError"];
                };
            };
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "GET_/auth/logout": {
        parameters: {
            query?: never;
            header?: {
                Accept?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["unknown-interface"];
                    "application/xml": components["schemas"]["unknown-interface"];
                };
            };
            /** @description Bad Request _(validation or deserialization error)_ */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPError"];
                    "application/xml": components["schemas"]["HTTPError"];
                };
            };
            /** @description Internal Server Error _(panics)_ */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPError"];
                    "application/xml": components["schemas"]["HTTPError"];
                };
            };
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "GET_/auth/refresh": {
        parameters: {
            query?: never;
            header?: {
                Accept?: string;
            };
            path?: never;
            cookie?: never;
        };
        /** @description Request body for auth.loginSuccessParams */
        requestBody: {
            content: {
                "*/*": components["schemas"]["loginSuccessParams"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["tokenResponse"];
                    "application/xml": components["schemas"]["tokenResponse"];
                };
            };
            /** @description Bad Request _(validation or deserialization error)_ */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPError"];
                    "application/xml": components["schemas"]["HTTPError"];
                };
            };
            /** @description Internal Server Error _(panics)_ */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPError"];
                    "application/xml": components["schemas"]["HTTPError"];
                };
            };
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
